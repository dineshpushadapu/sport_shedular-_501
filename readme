
# 🏆 Sports Scheduler Web Application

> **A modern, full-stack sports management platform for administrators and users, built with Node.js, Express.js, PostgreSQL, and EJS.**

---

## 🚀 Project Overview

The Sports Scheduler is a web-based application designed to streamline sports management for both administrators and users. It features:

- **Role-based access** (Admin & User)
- **Secure authentication**
- **Dynamic session and sport management**
- **Interactive dashboards**
- **Comprehensive reporting**

---

## 🛠️ Technologies Used

- **Backend:** Node.js, Express.js
- **Frontend:** EJS (Embedded JavaScript Templates), Tailwind CSS
- **Database:** PostgreSQL
- **Authentication:** bcrypt.js, express-session

---

## 👤 User Roles & Features

### 👑 Admin
- **Create Sports:** Add new sports to the system.
- **Manage Sessions:** Create and delete sessions for any sport.
- **Change Password:** Update admin password securely.
- **View Reports:** Access analytics on sports and session popularity.

### 🙋 User
- **Register/Login:** Securely sign up and log in.
- **Create Sessions:** Organize new sports sessions.
- **Join Sessions:** Participate in available sessions.
- **Change Password:** Update user password securely.

---

## 🏗️ Database Schema

| Table           | Description                                 |
|-----------------|---------------------------------------------|
| Users           | Stores user details & hashed passwords      |
| CreateSport     | List of all created sports                  |
| Sessions        | Details of each session, linked to sports   |
| SessionPlayers  | Tracks users joined to specific sessions    |

---

## 📋 Step-by-Step Functionality Guide

### 1️⃣ Authentication & Security
- **Password Hashing:** All passwords are hashed using bcrypt.js before storage.
- **Session Management:** express-session maintains user sessions, ensuring only authenticated users access protected routes.

### 2️⃣ Registration & Login
- **Unique Email Enforcement:** Users cannot register with an email that already exists in the system.
- **Role Assignment:** Users are assigned roles (admin/user) at registration.

### 3️⃣ Dashboard Access
- **Dynamic Rendering:** EJS templates render personalized dashboards for admins and users.
- **Role-Based Navigation:** Admins and users see only the features relevant to their role.

### 4️⃣ Sport & Session Management
- **Admins:**
  - Create new sports.
  - Create/delete sessions for any sport.
- **Users:**
  - Create new sessions for existing sports.
  - Join sessions created by others.

### 5️⃣ Preventing Past Session Joins
- **Middleware Check:** Before joining a session, the system checks if the session date is in the future. Users cannot join expired sessions.

### 6️⃣ Reports & Analytics
- **Session Popularity:** View which sports and sessions are most popular using aggregated SQL queries.
- **Engagement Trends:** Analyze user participation trends over time.

### 7️⃣ Password Management
- **Change Password:** Users and admins can change their password after validating their old password. New passwords are securely hashed.

### 8️⃣ Error Handling & Logging
- **Robust Error Handling:** All database and authentication errors are caught and logged for easier debugging and reliability.

---

## 🌐 Frontend Pages

- **Login & Registration** (`login.ejs`, `register.ejs`)
- **Admin Dashboard** (`admin-dashboard.ejs`)
- **User Dashboard** (`player-dashboard.ejs`)
- **Change Password** (`change-password.ejs`)
- **Reports** (`reports.ejs`)
- **Home** (`home.ejs`)

---

## 📦 How to Run the Project

1. **Clone the repository**
2. **Install dependencies:**
   ```bash
   npm install
   ```
3. **Configure your PostgreSQL database** (update credentials in `database.js`)
4. **Start the server:**
   ```bash
   node server.js
   ```
5. **Open your browser:** Go to `http://localhost:3000`

---

## 💡 Tips & Best Practices

- Use strong, unique passwords for all accounts.
- Regularly check reports to monitor engagement.
- Keep your dependencies up to date.

---

## 📞 Support

For any issues or questions, please contact the project maintainer.


Modules Implemented in the Capstone Project
1. Authentication & Security
The project implements bcrypt.js for password hashing, ensuring secure storage of user credentials. Additionally, express-session is used to manage user sessions, preventing unauthorized access to protected routes.

2. Session Management
User sessions are handled using express-session, allowing authentication persistence across page reloads. The system ensures proper session expiration and logout mechanisms for security.

3. Database Management
The pg module is used to interact with a PostgreSQL database, managing tables like users, sports, sessions, and session_players. Queries ensure efficient data storage and retrieval.

4. Role-Based Access Control (RBAC)
The system differentiates between admin and user roles, granting admins permissions to create/delete sports and sessions, while users can create or join existing sessions.

5. Data Integrity & Constraints
Duplicate email registrations are prevented by enforcing unique constraints in the database, ensuring a user cannot register with an already existing email.

6. Frontend Rendering
Using EJS (Embedded JavaScript Templates), the project dynamically renders pages such as login, registration, admin dashboard, and user dashboard, ensuring a responsive UI.

7. Preventing Past Session Joins
A middleware function checks if a session's date has already passed, preventing users from joining expired sessions.

8. Reports & Analytics
A reports section provides insights into session popularity and sports engagement trends using SQL queries that aggregate session data.

9. Password Management
Users can change passwords securely, ensuring old passwords are validated before updating new hashed passwords.

10. Error Handling & Logging
The application includes error handling mechanisms for database queries and user authentication failures, improving debugging and reliability.






















































































































